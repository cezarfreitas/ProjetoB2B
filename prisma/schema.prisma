// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for B2B customers
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  company   String
  cnpj      String?  @unique
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  cartItems CartItem[]

  @@map("users")
}

// Categories model
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

// Brands model
model Brand {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  logo_url    String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("brands")
}

// Genders model
model GenderType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products    Product[]

  @@map("genders")
}

// Colors model
model Color {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  hexCode     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productColors ProductColor[]

  @@map("colors")
}

// Collections model
model Collection {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  productCollections ProductCollection[]

  @@map("collections")
}

// Sizes model
model Size {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sizes")
}

// Grades model
model Grade {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  sizes       Json     // Record<string, number>
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("grades")
}

// Product model for Chinelos
model Product {
  id              String   @id @default(cuid())
  name            String
  description     String?
  sku             String   @unique
  groupCode       String?  // Código agrupador
  
  // Relacionamentos com tabelas de características
  categoryId      Int?
  brandId         Int?
  genderId        Int?
  
  price           Decimal  @db.Decimal(10, 2)
  costPrice       Decimal? @db.Decimal(10, 2)
  wholesalePrice  Decimal? @db.Decimal(10, 2)
  stock           Int      @default(0) // Estoque geral do produto
  minStock        Int      @default(0) // Estoque mínimo
  weight          Decimal? @db.Decimal(8, 2)
  dimensions      String?
  stockType       StockType @default(SIMPLE) // SIMPLE, VARIANT, GRADE
  stockFormat     Json     // Array de formatos de venda (GRADE, ABERTO, FECHADO)
  minQuantity     Int      @default(0) // Quantidade mínima para venda fechada
  isActive        Boolean  @default(true)
  images          Json     // Array of image URLs
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category?   @relation(fields: [categoryId], references: [id])
  brand           Brand?      @relation(fields: [brandId], references: [id])
  genderType      GenderType? @relation(fields: [genderId], references: [id])
  
  orderItems      OrderItem[]
  cartItems       CartItem[]
  productGrades   ProductGrade[]
  productVariants ProductVariant[]
  productImages   ProductImage[]
  stockMovements  StockMovement[]
  
  // Relacionamentos N:N
  productColors       ProductColor[]
  productCollections  ProductCollection[]
  productTags         ProductTag[]

  @@map("products")
}

// Product Variants for different sizes/colors
model ProductVariant {
  id          String   @id @default(cuid())
  productId   String
  variantSku  String   @unique // SKU único para a variante
  size        String?  // Tamanho da variante
  color       String?  // Cor da variante
  gradeName   String?  // Nome da grade (se aplicável)
  stock       Int      @default(0) // Estoque específico da variante
  minStock    Int      @default(0) // Estoque mínimo da variante
  price       Decimal? @db.Decimal(10, 2) // Preço específico da variante (opcional)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockMovements StockMovement[]

  @@map("product_variants")
}

// Product Images
model ProductImage {
  id          String   @id @default(cuid())
  productId   String
  url         String   // URL da imagem
  altText     String?  // Texto alternativo
  isMain      Boolean  @default(false) // Imagem principal
  sortOrder   Int      @default(0) // Ordem de exibição
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Stock Movements for tracking inventory changes
model StockMovement {
  id          String        @id @default(cuid())
  productId   String?
  variantId   String?
  movementType MovementType // ENTRY, EXIT, ADJUSTMENT, TRANSFER
  quantity    Int           // Quantidade movimentada (positiva para entrada, negativa para saída)
  reason      String?       // Motivo da movimentação
  reference   String?       // Referência externa (pedido, nota fiscal, etc.)
  notes       String?       // Observações
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  product     Product?      @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant     ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("stock_movements")
}

// Product Grades for B2B pricing
model ProductGrade {
  id          String   @id @default(cuid())
  productId   String
  gradeName   String   // Ex: "Varejo", "Atacado", "Distribuidor"
  minQuantity Int      // Quantidade mínima para esta grade
  maxQuantity Int?     // Quantidade máxima (opcional)
  price       Decimal  @db.Decimal(10, 2) // Preço para esta grade
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_grades")
}

// Order model
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  subtotal    Decimal     @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  shipping    Decimal     @default(0) @db.Decimal(10, 2)
  total       Decimal     @db.Decimal(10, 2)
  notes       String?
  shippingAddress String
  billingAddress  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

// Order items
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2) // Price at time of order
  total     Decimal @db.Decimal(10, 2)

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Shopping cart
model CartItem {
  id        String  @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
  MANAGER
}

enum Gender {
  MASCULINO
  FEMININO
  UNISSEX
  INFANTIL
}

enum StockType {
  SIMPLE   // Estoque simples
  VARIANT  // Controle por variante (tamanho/cor)
  GRADE    // Controle por grade
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum MovementType {
  ENTRY        // Entrada de estoque
  EXIT         // Saída de estoque
  ADJUSTMENT   // Ajuste de estoque
  TRANSFER     // Transferência entre produtos/variantes
}

// Relacionamento N:N entre produtos e cores
model ProductColor {
  id        String   @id @default(cuid())
  productId String
  colorId   Int
  createdAt DateTime @default(now())

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color     Color   @relation(fields: [colorId], references: [id])

  @@unique([productId, colorId])
  @@map("product_colors")
}

// Relacionamento N:N entre produtos e coleções
model ProductCollection {
  id            String   @id @default(cuid())
  productId     String
  collectionId  Int
  createdAt     DateTime @default(now())

  // Relations
  product       Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection    Collection @relation(fields: [collectionId], references: [id])

  @@unique([productId, collectionId])
  @@map("product_collections")
}

// Relacionamento N:N entre produtos e tags
model ProductTag {
  id        String   @id @default(cuid())
  productId String
  tagName   String
  createdAt DateTime @default(now())

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, tagName])
  @@map("product_tags")
}

// Store Settings for global store configuration
model StoreSettings {
  id               Int              @id @default(autoincrement())
  storeName        String
  logoUrl          String?
  description      String?          @db.Text
  seoText          String?          @db.Text
  contactPhone     String?
  address          String?          @db.Text
  cnpj             String?
  email            String?
  detailedAddress  String?          @db.Text
  street           String?
  number           String?
  complement       String?
  zipCode          String?
  neighborhood     String?
  city             String?
  state            String?
  facebook         String?
  instagram        String?
  tiktok           String?
  googleBusiness   String?
  youtube          String?
  linkedin         String?
  website          String?
  publicAccessMode PublicAccessMode @default(OPEN) // Controle de visibilidade para não autenticados
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("store_settings")
}

// Enum para controle de acesso público
enum PublicAccessMode {
  CLOSED  // Apenas home com slider (sem produtos)
  PARTIAL // Home + slider + produtos sem preços
  OPEN    // Tudo aberto com preços
}

// Sellers model for managing sales representatives
model Seller {
  id              String   @id @default(cuid())
  name            String
  email           String   @unique
  phone           String?
  cpf             String?  @unique
  commissionRate  Decimal  @default(0) @db.Decimal(5, 2) // Percentual de comissão
  totalSales      Decimal  @default(0) @db.Decimal(10, 2) // Total de vendas realizadas
  region          String?  // Região de atuação
  brandIds        Json?    // Array de IDs de marcas [1, 2, 3]
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("sellers")
}
